import { FNR_LENGTH, Gender, ValidateFnrWrapper } from '../types/types'
import { generateRandomBirthDate, isValidFnrBirthdate } from './birthdate'
import {
  createValidateFnrReturnObject,
  generateControlDigits,
  generateRandomIndividualNumber,
  getFnrBirthdayFromBirthdate,
  isPossiblyDnumber,
  isPossiblyFHnumber,
  isPossiblyHnumber,
} from '../lib/fnr/fnr'

/**
 * A Norwegian FNR consists of 11 digits, where the first six digits is
 * the persons birthdate and the five last digits is the person number.
 *
 * The first three digits of the person number is an individual number, while the last two are
 * control digits generated by applying mod11 to the birthdate and individual number.
 *
 * More details can be found at
 * <a href="https://www.skatteetaten.no/en/person/national-registry/birth-and-name-selection/children-born-in-norway/national-id-number/>Skatteetaten</a>.
 *
 * @param gender The persons biological gender at birth.
 */
export const generateFnr = (gender: Gender): string => {
  const birthdate = generateRandomBirthDate()
  const fnrBirthday = getFnrBirthdayFromBirthdate(birthdate)
  const individualNumber = generateRandomIndividualNumber(birthdate, gender)
  const partialFnr = fnrBirthday.concat(individualNumber)
  const controlDigits = generateControlDigits(partialFnr)

  if (controlDigits.length != 2) return generateFnr(gender)

  return [fnrBirthday, individualNumber, controlDigits].join('')
}

export const validateFnr = (fnr: string): ValidateFnrWrapper => {
  try {
    if (fnr.length != FNR_LENGTH)
      return createValidateFnrReturnObject(
        false,
        `FNR has length ${fnr.length}, should be ${FNR_LENGTH}`,
        fnr
      )
    const k1 = fnr.slice(-2)[0]
    const k2 = fnr.slice(-1)
    const partialFnr = fnr.slice(0, 9)
    const birthdate = fnr.slice(0, 6)
    const individualNumber = fnr.slice(6, 9)

    const dnumber = isPossiblyDnumber(fnr)
    const hnumber = isPossiblyHnumber(fnr)
    const fhnumber = isPossiblyFHnumber(fnr)
    const validFnr = isValidFnrBirthdate(birthdate)

    if (!validFnr && !dnumber && !hnumber && !fhnumber) {
      return createValidateFnrReturnObject(
        false,
        `Invalid birthday ${birthdate}.`,
        fnr
      )
    }

    const controlDigits = generateControlDigits(partialFnr)
    if (controlDigits.length != 2)
      return createValidateFnrReturnObject(
        false,
        `This is an invalid FNR; the individual ${individualNumber} number is wrong.`,
        fnr
      )

    if (k1 !== controlDigits[0] && k2 !== controlDigits[1])
      return createValidateFnrReturnObject(
        false,
        `Invalid control digits k1 ${k1} and k2 ${k2}`,
        fnr
      )
    if (k1 !== controlDigits[0])
      return createValidateFnrReturnObject(
        false,
        `Invalid control digit k1 ${k1}`,
        fnr
      )
    if (k2 !== controlDigits[1])
      return createValidateFnrReturnObject(
        false,
        `Invalid control digit k2 ${k2}`,
        fnr
      )

    let retTypes = []
    if (validFnr) retTypes.push('FNR')
    if (dnumber) retTypes.push('D-number')
    if (hnumber) retTypes.push('H-number')
    if (fhnumber) retTypes.push('FH-number')

    let retMsg =
      `The FNR is valid as ${retTypes.length > 1 ? 'types' : 'type'} ` +
      retTypes.join(', ')
    return createValidateFnrReturnObject(true, retMsg, fnr)
  } catch (err) {
    return createValidateFnrReturnObject(
      false,
      'An error was thrown; ' + err,
      fnr
    )
  }
}
